/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int val;
 *		Node *next;
 * 		Node *prev;
 *		Node() : val(0), next(nullptr), prev(nullptr){};
 *		Node(int x) : val(x), next(nullptr), prev(nullptr) {}
 *		Node(int x, Node *next, Node *prev) : val(x), next(next), prev(prev) {}
 * };
 */

Node *deleteNode(Node *head, int k)
{
    Node *first=head;
    Node *del;
    Node *del1=head;
   
    if(head->next==NULL)
    return NULL;

    if(head==NULL)
    return NULL;

int n=0;
    while (del1 != NULL) 
    {
        n++;
        del1=del1->next;
       
    }
     if(n==2)
     {
        if(k==2)
    {
        head->next=NULL;
        head->prev=NULL;
        return head;
    }
    if(k==1)
    {
        head=head->next;
        head->prev=NULL;
        return head;
    } 


    
     }

       if(k==1)
    {
        head=head->next;
        head->prev=NULL;
        return head;
    } 
     if(n==k)
     {
        Node *del2=head;
        Node *start=head;
        Node *del;
          while(del2->next!=NULL)
    {
        del=del2;
        del2=del2->next;
    }
    //cout<<del->data;
    del->next=NULL;
    return head;
     }


  /*
    if(k==1)
    {
        head=head->next;
        head->prev=NULL;
        return head;
    }
*/
   

 int count=1;
    while(first!=NULL)
    {
        del=first->prev;
        //del1=first->next;
        if(k==count)
        {
            del->next=first->next;
            first=first->next;
            first->prev=del;
            //cout<<first->val<<" "<<del->val;
            break;
        }
        count++;
        first=first->next;
        
    }

    
    cout<<"\n";
    return head;
   
}
