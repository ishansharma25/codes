/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */


Node *merge(Node *a,Node *b)
{
	
	Node *dummy =new Node(-1);
	Node *temp=dummy;
	
	while(a!=NULL&&b!=NULL)
	{
		if(a->data<b->data)
		{
			temp->child=a;
			temp=temp->child;

			a=a->child;
			
		}
		else
		{
			temp->child=b;
			temp=temp->child;

			b=b->child;
			


		}
	}
	if(a!=NULL)
	{
		temp->child=a;
	}
	else if(b!=NULL)
	{
		temp->child=b;
	}
	  
	return dummy->child;
}


Node *flattenLinkedList(Node *head) 
{

        if (head == NULL || head->next == NULL)
		 {
                return head;
        }
        head->next=flattenLinkedList(head->next);
	head=merge(head,head->next);
	return head;
}

/*
#include <algorithm>

Node* flattenLinkedList(Node* head) 
{
	Node *first=head;
	Node *temp;
	vector<int> a;
	int i=1;
	
	while(first!=NULL)
	{
		temp=first->next;
		a.push_back(first->data);
		
		while(first->child!=NULL)
		{
				a.push_back(first->child->data);
				
			//cout<<first->child->data<<" ";
			first=first->child;
		}

		first->child=temp;
		first=temp;
	}
	sort(a.begin(),a.end());
	Node *dummy=new Node(a[0]);
	Node *temp1=dummy;
	while(i<a.size())
	{
		temp1->child=new Node(a[i]);
		i++;
		temp1=temp1->child;

	}
	temp1->child=NULL;
	
	return dummy;
}*/





