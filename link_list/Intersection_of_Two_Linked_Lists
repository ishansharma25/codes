
Node *findIntersection(Node *firstHead, Node *secondHead)
 {
  Node *first = firstHead;
  Node *second = secondHead;
  
   int l1=0,l2=0;
   while(first!=NULL)
   {
     
       l1++;
       first = first->next;
     
   }
   while(second!=NULL)
   {
        
           l2++;
            second=second->next;
       
   }
  
int k=l1-l2;
if(k<0)
{
       while (k != 0) {
            k++;
             
               secondHead = secondHead->next;
           
            
       }
} 
else {
       while (k != 0) {
               k--;
               firstHead = firstHead->next;
       }
}
while(firstHead!=NULL)
{
    if(firstHead==secondHead)
    {
        return firstHead;
    }
    firstHead = firstHead->next;
    secondHead = secondHead->next;
}
return NULL;

}


/*
int getDifference(Node* head1,Node* head2) {
     int len1 = 0,len2 = 0;
        while(head1 != NULL || head2 != NULL) {
            if(head1 != NULL) {
                ++len1; head1 = head1->next;
            }
            if(head2 != NULL) {
                ++len2; head2 = head2->next;
            }
            
        }
        return len1-len2;//if difference is neg-> length of list2 > length of list1 else vice-versa
}

//utility function to check presence of intersection
Node *findIntersection(Node *head1, Node *head2)
 {
 int diff = getDifference(head1,head2);
        if(diff < 0)
            while (diff != 0) {
                diff++;
                head2 = head2->next;
            }
        else
            while (diff != 0) {
                diff--;
                head1 = head1->next;
            }
        while(head1 != NULL) {
            if(head1 == head2) return head1;
            head2 = head2->next;
            head1 = head1->next;
        }
        return head1;


}


*/
















/*-----------------------------------optimal----------------------------------*/
Node* findIntersection(Node *firstHead, Node *secondHead)
{

    Node *fh = firstHead;
    Node *sh = secondHead;

    while (fh != sh) {
      if (fh == NULL) {
        fh = secondHead;
      }
      if (sh == NULL) {
        sh = firstHead;
      }
         fh = fh->next ;
         sh =sh->next;
    }

    if (fh!=NULL)
        return fh;
    else
        return NULL;
}

