/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */


Node* kReverse(Node* head, int k) {
  int size = 0;

    Node *curr = head;

    while(curr){
        curr = curr -> next;
        size++;
    }

    if(size<k){

        return head;

    }

    Node *first=head;
    Node *next=NULL;
    Node *pre=NULL;
    int n=0;
    while(first!=NULL&&n<k)
    {
        next=first->next;
        first->next=pre;
        pre=first;
        first=next;
        n++;
    }
    if(next!=NULL)
    {
        head->next=kReverse(next,k);
    }
    return pre;
}
