/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* middle_number(Node *head)
{
    Node *slow=head;
    Node *fast=head->next;
    while(fast!=NULL&&fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}


Node *merge(Node *left,Node *right)
{
    Node *ans=new Node(-1);
    Node *temp=ans;

    while(left!=NULL&&right!=NULL)
    {
        if(left->data<right->data)
        {
            temp->next=left;
            temp=left;
            left=left->next;
        }
        else
        {
            temp->next=right;
            temp=right;
            right=right->next;

        }
    }
      while(left!=NULL){
        temp->next = left;
        temp = left;
        left = left->next;
    }
    while(right!=NULL){
        temp->next = right;
        temp = right;
        right = right->next;
    }
    ans=ans->next;
    return ans;
}


Node* sortList(Node* head){

     if(head == NULL || head->next == NULL){
        return head;
    }
    Node *first=head;
   /* Node *last=head;
    while(last->next!=NULL)
    {
        last=last->next;
    }
    cout<<last->data;
    mergesort(head,first,last);
    return head;*/
    Node *middle=middle_number(head);
 // cout<<middle->data;
  Node *left=head;
  Node *right=middle->next;
  middle->next=NULL;
  left=sortList(left);
  right=sortList(right);
  Node *ans=merge(left,right);
  return ans;

}
